1) IAM: To Manage Access to AWS resources

   Users : are people within your organization and can be grouped.

   Role : A way of providing aws credentials to Aws services.
   roles are entities you create and assign specific permissions to that allow trusted identities such as workforce identities and applications to perform actions in AWS.
   When your trusted identities assume IAM roles, they are granted only the permissions scoped by those IAM roles.

   Example: we can have a role attached to an ec2 instance, 
            we can attach a role to AWS Lamnbda.


    you have an ec2 instance and if you connect to it and run a sample command like  - aws iam list users 
    we get access denied because we did not configure aws credentials for this instance to interact with aws. but we cannot actually configure aws credentials on an 
    instance because anyon ewho has access to the instance can get those credentials. 
    So for that we can create a role which has a policy to access IAM and attach the role to the Ec2 instance.


   IAM role session:

    IAM roles help you grant access to AWS services and resources by using dynamically generated short-term credentials. 
    Each instantiation of an IAM role, and the associated set of short-term credentials, is known as an IAM role session. 
    Each IAM role session is uniquely identified by a role session name.



    Trust Relationships:


   Policies : Users or Groups can be assigned JSON documnets called policies. These policies define the permissions of the users.
   Permissions to access certain aws resources.

   Identity Based Policies
   Resource based policies
   Permission Boundary

   Effective permissions are the permissions common in all the baove 3 policies




   -- AWS Organization - Central Management for multiple AWS Accounts
   AWS Organizations helps you centrally manage and govern your environment as you grow and scale your AWS resources.
   Using AWS Organizations, you can create accounts and allocate resources, group accounts to organize your workflows, 
   apply policies for governance, and simplify billing by using a single payment method for all of your accounts. 
   AWS Organizations is integrated with other AWS services so you can define central configurations, security mechanisms, audit requirements,
   and resource sharing across accounts in your organization. AWS Organizations is available to all AWS customers at no additional charge.




   Permission Boundary: The permissions boundary for an IAM entity (user or role) sets the maximum permissions that the entity can have.
    This can change the effective permissions for that user or role. 
    The effective permissions for an entity are the permissions that are granted by all the policies that affect the user or role. 
    Within an account, the permissions for an entity can be affected by identity-based policies, resource-based policies, permissions boundaries, Organizations SCPs,
   or session policies. 




2) IAM Identity center (successor to AWS Single Sign-On)




3) AWS STS Assume role:

Security Token Service (STS)
STS is used to create and provide trusted users with temporary security credentials that can control access to your AWS resources.

STS is AWS service which is used for getting temporary credentials.

STS assume role returns  a set of temporary security credentials that you can use to access AWS resources.
These temporary credentials consist of an access key ID, a secret access key, and a security token.

4) aws Configure - to set up local CLI to access AWS console. // Before this Download amazon CLI and check for version using aws --version

sample aws commands :

aws iam list-users : lists all the users



sample Error Message when a user doesnt have access to a Service:

Couldn't retrieve queues.
Error code: AccessDenied. Error message: User: arn:aws:iam::524195336295:user/Tfrom is not authorized to perform: sqs:listqueues on
 resource: arn:aws:sqs:us-east-1:524195336295:because no identity-based policy allows the sqs:listqueues action





