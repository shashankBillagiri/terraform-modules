Terraform basic commands :

1) Terraform init - goes through the configurations and downloads the necessary plugins required for the provider:
example: if you are using AWS, this command downloads all the necessary plugins required.

you see the below when you use init command:

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v4.62.0
Terraform has been successfully initialized!


2) Terraform plan

when you use this you can see what are all the changes you are going to make to your infrastructure.

if you do not have any changes for your configurations and try running the above  you see the below


      No changes. Your infrastructure matches the configuration.

3) Terrafrom apply

interacts with AWS api and creates or modifies  the necessary infrastructure as per our changes.

terraform apply --auto-approve  (skips the step of typing yes when we use terrafrom apply command)


4) Terraform destroy
if you use this by default terraform destroys entire infrastructure.
you will see the below pop up

Terraform will destroy all your managed infrastructure, as shown above.
There is no undo. Only 'yes' will be accepted to confirm.


>> if you want to destroy a particular  resource you will have extra parameters.
terraform destroy -target aws_instance.ec2Instance

TAREGT RESOURCES: 
terraform destroy  -target aws_eip.PractiseElasticIp
terraform apply  -target aws_eip.PractiseElasticIp


5) Terraform validate      Check whether the configuration is valid


6) just hit terraform command it will show you the list of terraform commands available.


7) terraform fmt - format code as per HCL canonical standard.

8) terraform -install-autocomplete - Setup tab auto-completion, requires logging back in



Terraform State Commands


1) terraform state  - 
 Terraform logs information about the resources it has created in a state file. 
 This enables Terraform to know which resources are under its control and when to update and destroy them.

lists all the sub commands of terraform state.
  ex: Subcommands:
        list     List resources in the state
        mv       Move an item in the state
        pull     Pull current state and output to stdout
        ex:  terraform state pull 'data.aws_vpc.getdefaultVpc'

        push     Update remote state from a local state file
        replace-provider    Replace provider in the state
        rm       Remove instances from the state
        show      Show a resource in the state
        ex: terraform state show 'data.aws_vpc.getdefaultVpc'

Terraform Output:

instead of using terraform state show to get the details of the AWS resource, we can print the details when we do terraform apply.

Syntax:

output "name" {
  value = aws_eip.PractiseElasticIp.public_ip
}

The above will run once you run terraform apply command.

if you want to see all the outputs we can also run terraform output command.

instead of using terraform apply you can use terraform refresh command  so that we can see the outputs. Since sometimes terraform apply could potentially
 change the configurations and  thats not desired in production.



 Terraform variables:

 1)     Syntax:

        variable "subnet_prefix" {
              # the below three arguments are completely optional.
               description = "some description"
               default = 
               type
               }


2) setting value to a variable through command line.
         if we do not set any value for the variable it will prompt us to give as input while doing terraform apply.

         we can use the below command to set the value for the variable

        terraform apply -var subnet_prefix= "10.0.0.0/16"


3) terraform looks for a file called terraform.tfvars where it looks for the values set for any variable. 
   This will not prompt us to give values when we are doing terraform apply.

4) If we want to terraform to refer to a particular files for variable values
   
          terraform apply -var-file example.tfvars
5) in .tf file we define a variable and in .tfvars file we assign a value.


Data Source:

1)  Data sources allow Terraform to use information defined outside of Terraform, defined by another separate Terraform configuration, or modified by functions.


Miscellaneous:

a) Terraform state file:
Terraform stores information about your infrastructure in a state file.
This state file keeps track of resources created by your configuration and maps them to real-world resources.
By default, a backup of your state file is written to terraform. tfstate.backup in case the state file is lost or corrupted to simplify recovery. 
The state file is used by Terraform to keep track of resources and metadata information about your infrastructure

b) The order in which you create resources doesn't amtter in Terraform. (There are few Exceptions)

c) User data is a helpful tool to get rid of routine operations after server provisioning.
 You can get a ready-to-use server with additional software installed and configured according to your specification. 
 The feature is built upon the cloud-init package for Linux operating systems. Cloud-init serves for performing operations while server's initialization, 
 its behavior is defined by a special type of content - user data. To manage post-install operations via Terraform,
  we have implemented the "user_data" argument in the serverscom_dedicated_server resource.

d) Basically <<EOF tells the shell that you are going to enter a multiline string until the "tag" EOF




Local Values

1) synonymous to local variables in Programming.

example:   shell = ["crunchy", "soft"]
  tags = {
    number = 42
    item   = "towel"
    planet = "Earth"
    poetry = "Vogon"
  }
  meaning_of_life = "What is 6 x 7? ${local.tags["number"]}"




  Terraform workspace:

  1) Use the TERRAFORM WORKSPACE LIST, TERRAFORM WORKSPACE NEW, and TERRAFORM WORKSPACE DELETE commands to manage the available workspaces in 
  the current working directory.Use the TERRAFORM WORKSPACE SELECT command to change the currently selected workspace. For a given working directory, 
  you can only select one workspace at a time. Most Terraform commands only interact with the currently selected workspace.
  Example: 
  terraform workspace list -  lists the various workspaces. by default we are in a workspace called  default. 





Terraform console:

What is a terraform console?
command: Terraform console
The Terraform console is an interpreter that you can use to evaluate Terraform expressions and explore your Terraform project's state

example: if yo want to see the local values, got to terraform console and do local.shell
if you want to see the value of a variable ---var.sample_subnet


Terraform AWS secret manager valueFrom syntax





Practise Project:

# 1. Create vpc -
# 2. Create Internet Gateway - within the above vpc we are designating an internet gateway so that we can actually sent traffic out to the internet because we 
# do want to assign a public IP adress so that anybody in the world can reach it.
# 3. Create Custom Route Table - Custom route table is A route table that you create for your VPC. 
#Destinationâ€”The range of IP addresses where you want traffic to go (destination CIDR). 
#For example, an external corporate network with the CIDR 172.16.0.0/12 .
# 4. Create a Subnet - Virtual Private Cloud (VPC) networks are global resources. Each VPC network consists of one or more IP address range called subnets.
# Subnets are regional resources, and have IP address ranges associated with them.
# 5. Associate subnet with Route Table
# 6. Create Security Group to allow port 22,80,443 - Security Group is responsible to enable what kind of traffic you want to get to your Ec2 Instances
# ex: if its a webserver we will allow port 80 and port 443 for http and https traffic respectively. We will also allow port 22 so that we can ssh in to it.
# 7. Create a network interface with an ip in the subnet that was created in step 4
# 8. Assign an elastic IP to the network interface created in step 7 - This is a publicIp  so that anyone on the internet can access it.
# 9. Create Ubuntu server and install/enable apache2.